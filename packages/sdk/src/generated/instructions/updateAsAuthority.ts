/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { ExtensionMetadataData, extensionMetadataDataBeet } from '../types/ExtensionMetadataData';

/**
 * @category Instructions
 * @category UpdateAsAuthority
 * @category generated
 */
export type UpdateAsAuthorityInstructionArgs = {
  data: ExtensionMetadataData;
};
/**
 * @category Instructions
 * @category UpdateAsAuthority
 * @category generated
 */
export const updateAsAuthorityStruct = new beet.FixableBeetArgsStruct<
  UpdateAsAuthorityInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['data', extensionMetadataDataBeet],
  ],
  'UpdateAsAuthorityInstructionArgs',
);
/**
 * Accounts required by the _updateAsAuthority_ instruction
 *
 * @property [_writable_] extensionMetadata
 * @property [_writable_, **signer**] updateAuthority
 * @property [] extensionManager
 * @property [] collectionMint
 * @property [] metadata
 * @category Instructions
 * @category UpdateAsAuthority
 * @category generated
 */
export type UpdateAsAuthorityInstructionAccounts = {
  extensionMetadata: web3.PublicKey;
  updateAuthority: web3.PublicKey;
  extensionManager: web3.PublicKey;
  collectionMint: web3.PublicKey;
  metadata: web3.PublicKey;
};

export const updateAsAuthorityInstructionDiscriminator = [134, 111, 142, 67, 2, 81, 124, 2];

/**
 * Creates a _UpdateAsAuthority_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UpdateAsAuthority
 * @category generated
 */
export function createUpdateAsAuthorityInstruction(
  accounts: UpdateAsAuthorityInstructionAccounts,
  args: UpdateAsAuthorityInstructionArgs,
) {
  const { extensionMetadata, updateAuthority, extensionManager, collectionMint, metadata } =
    accounts;

  const [data] = updateAsAuthorityStruct.serialize({
    instructionDiscriminator: updateAsAuthorityInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: extensionMetadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: updateAuthority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: extensionManager,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: collectionMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: metadata,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey('BLoBXGoEp1KmFcYNbzFeq9KaFyrqy4A1HH55ceA19qLW'),
    keys,
    data,
  });
  return ix;
}
