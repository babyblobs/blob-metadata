/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category InitializeExtensionManager
 * @category generated
 */
export const initializeExtensionManagerStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */;
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'InitializeExtensionManagerInstructionArgs',
);
/**
 * Accounts required by the _initializeExtensionManager_ instruction
 *
 * @property [_writable_] extensionManager
 * @property [_writable_] metadata
 * @property [] mint
 * @property [_writable_, **signer**] updateAuthority
 * @category Instructions
 * @category InitializeExtensionManager
 * @category generated
 */
export type InitializeExtensionManagerInstructionAccounts = {
  extensionManager: web3.PublicKey;
  metadata: web3.PublicKey;
  mint: web3.PublicKey;
  updateAuthority: web3.PublicKey;
};

export const initializeExtensionManagerInstructionDiscriminator = [
  140, 110, 136, 10, 68, 184, 244, 248,
];

/**
 * Creates a _InitializeExtensionManager_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category InitializeExtensionManager
 * @category generated
 */
export function createInitializeExtensionManagerInstruction(
  accounts: InitializeExtensionManagerInstructionAccounts,
) {
  const { extensionManager, metadata, mint, updateAuthority } = accounts;

  const [data] = initializeExtensionManagerStruct.serialize({
    instructionDiscriminator: initializeExtensionManagerInstructionDiscriminator,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: extensionManager,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: metadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: updateAuthority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey('BLoBXGoEp1KmFcYNbzFeq9KaFyrqy4A1HH55ceA19qLW'),
    keys,
    data,
  });
  return ix;
}
