/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import * as beet from '@metaplex-foundation/beet';
import { ExtensionMetadataData, extensionMetadataDataBeet } from '../types/ExtensionMetadataData';

/**
 * Arguments used to create {@link ExtensionMetadata}
 * @category Accounts
 * @category generated
 */
export type ExtensionMetadataArgs = {
  collectionMint: web3.PublicKey;
  mint: web3.PublicKey;
  extensionData: ExtensionMetadataData;
};

const extensionMetadataDiscriminator = [226, 105, 229, 144, 157, 160, 41, 225];
/**
 * Holds the data for the {@link ExtensionMetadata} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class ExtensionMetadata implements ExtensionMetadataArgs {
  private constructor(
    readonly collectionMint: web3.PublicKey,
    readonly mint: web3.PublicKey,
    readonly extensionData: ExtensionMetadataData,
  ) {}

  /**
   * Creates a {@link ExtensionMetadata} instance from the provided args.
   */
  static fromArgs(args: ExtensionMetadataArgs) {
    return new ExtensionMetadata(args.collectionMint, args.mint, args.extensionData);
  }

  /**
   * Deserializes the {@link ExtensionMetadata} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [ExtensionMetadata, number] {
    return ExtensionMetadata.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link ExtensionMetadata} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
  ): Promise<ExtensionMetadata> {
    const accountInfo = await connection.getAccountInfo(address);
    if (accountInfo == null) {
      throw new Error(`Unable to find ExtensionMetadata account at ${address}`);
    }
    return ExtensionMetadata.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Deserializes the {@link ExtensionMetadata} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [ExtensionMetadata, number] {
    return extensionMetadataBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link ExtensionMetadata} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return extensionMetadataBeet.serialize({
      accountDiscriminator: extensionMetadataDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link ExtensionMetadata} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: ExtensionMetadataArgs) {
    const instance = ExtensionMetadata.fromArgs(args);
    return extensionMetadataBeet.toFixedFromValue({
      accountDiscriminator: extensionMetadataDiscriminator,
      ...instance,
    }).byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link ExtensionMetadata} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: ExtensionMetadataArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      ExtensionMetadata.byteSize(args),
      commitment,
    );
  }

  /**
   * Returns a readable version of {@link ExtensionMetadata} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      collectionMint: this.collectionMint.toBase58(),
      mint: this.mint.toBase58(),
      extensionData: this.extensionData,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const extensionMetadataBeet = new beet.FixableBeetStruct<
  ExtensionMetadata,
  ExtensionMetadataArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['collectionMint', beetSolana.publicKey],
    ['mint', beetSolana.publicKey],
    ['extensionData', extensionMetadataDataBeet],
  ],
  ExtensionMetadata.fromArgs,
  'ExtensionMetadata',
);
