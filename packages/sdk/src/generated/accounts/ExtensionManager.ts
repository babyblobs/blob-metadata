/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import * as beet from '@metaplex-foundation/beet';

/**
 * Arguments used to create {@link ExtensionManager}
 * @category Accounts
 * @category generated
 */
export type ExtensionManagerArgs = {
  collectionMint: web3.PublicKey;
};

const extensionManagerDiscriminator = [112, 202, 225, 17, 156, 54, 248, 177];
/**
 * Holds the data for the {@link ExtensionManager} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class ExtensionManager implements ExtensionManagerArgs {
  private constructor(readonly collectionMint: web3.PublicKey) {}

  /**
   * Creates a {@link ExtensionManager} instance from the provided args.
   */
  static fromArgs(args: ExtensionManagerArgs) {
    return new ExtensionManager(args.collectionMint);
  }

  /**
   * Deserializes the {@link ExtensionManager} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [ExtensionManager, number] {
    return ExtensionManager.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link ExtensionManager} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
  ): Promise<ExtensionManager> {
    const accountInfo = await connection.getAccountInfo(address);
    if (accountInfo == null) {
      throw new Error(`Unable to find ExtensionManager account at ${address}`);
    }
    return ExtensionManager.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Deserializes the {@link ExtensionManager} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [ExtensionManager, number] {
    return extensionManagerBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link ExtensionManager} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return extensionManagerBeet.serialize({
      accountDiscriminator: extensionManagerDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link ExtensionManager}
   */
  static get byteSize() {
    return extensionManagerBeet.byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link ExtensionManager} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(ExtensionManager.byteSize, commitment);
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link ExtensionManager} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === ExtensionManager.byteSize;
  }

  /**
   * Returns a readable version of {@link ExtensionManager} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      collectionMint: this.collectionMint.toBase58(),
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const extensionManagerBeet = new beet.BeetStruct<
  ExtensionManager,
  ExtensionManagerArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['collectionMint', beetSolana.publicKey],
  ],
  ExtensionManager.fromArgs,
  'ExtensionManager',
);
